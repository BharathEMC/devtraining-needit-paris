<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>inc_create (v2)</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // implementation of Create Incident Logic
	try {
	
	//var impUser = new GlideImpersonate();
	//impUser.impersonate('62826bf03710200044e0bfc8bcbe5df1');
		
	var requestBody = request.body.data;
	
	//If any of the mandatory argument are missing through an http exception object 400
	if (!(requestBody.hasOwnProperty('short_description') && requestBody.hasOwnProperty('impact') && requestBody.hasOwnProperty('urgency') && requestBody.hasOwnProperty('description'))) {
		return new sn_ws_err.BadRequestError('Mandatory argument for create Incident API are missing');
	}
	//Check for the empty value for mandatory arguments
	if (!(requestBody.short_description && requestBody.impact && requestBody.urgency && requestBody.description)) {
		return new sn_ws_err.BadRequestError('One or more mandatory argument have empty value');
	}
		
	var inc = new GlideRecord('incident');
	inc.initialize();
	inc.caller_id = gs.getUserID(); //'admin';
	inc.short_description =  requestBody.short_description;
	inc.impact = requestBody.impact; //Creating low impact incident
	inc.urgency = requestBody.urgency; //Creating low urgency ticket, Severity is auto populated
	inc.description = requestBody.description;

	//Not Mandatory to update
	inc.contact_type = requestBody.contact_type;
	inc.category     = requestBody.category;
	inc.subcategory  = requestBody.subcategory;

	//Create incident record
	inc.insert();

	var body = {};
	body.msg = "Incident " + inc.number + " Successfully Created";
	// Send the response object, which is returned to the requestor, to the body object.
	response.setBody(body);
		
	} catch(err) {
		var myErr = new sn_ws_err.ServiceError();
		myErr.setStatus(501);
		myErr.setMessage('Server side internal error');
		myErr.setDetail('Server side error : ' + err.message);
		return myErr;
	}


})(request, response);]]></operation_script>
        <operation_uri>/api/x_58872_needit/v2/create_incident_api/ngcs/itms/incident</operation_uri>
        <produces>application/json</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/ngcs/itms/incident</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description>Create new Incident Record in NGCS SNOW with given input details</short_description>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-12-14 07:22:19</sys_created_on>
        <sys_id>cb9cb8632f100110d2d0351ef699b661</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>inc_create (v2)</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ws_operation_cb9cb8632f100110d2d0351ef699b661</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-12-17 12:02:40</sys_updated_on>
        <web_service_definition display_value="Create Incident API">7a168c172f100110d2d0351ef699b66e</web_service_definition>
        <web_service_version display_value="v2">f69cf4632f100110d2d0351ef699b665</web_service_version>
    </sys_ws_operation>
</record_update>
